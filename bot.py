import os
import logging
import asyncio
from telegram import InputFile, Bot
from telegram.error import TelegramError
from aiohttp import web
import aiohttp_cors
from io import BytesIO

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = "8465873812:AAGvjy0WzCEzFx2g8S_xbVS9NaA6tupF_lM"  # –£–±—Ä–∞–ª–∏ –ª–∏—à–Ω—é—é —Å–∫–æ–±–∫—É
GROUP_ID = -1001234567890  # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã Telegram
UPLOAD_ROUTE = "/upload"  # –ø—É—Ç—å –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–æ–≤

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

async def send_photo_to_group(photo_content: bytes, guest_name: str, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –≥—Ä—É–ø–ø—É."""
    try:
        caption = f"üì∏ –ù–æ–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –≥–æ—Å—Ç—è: {guest_name}"
        photo_file = InputFile(BytesIO(photo_content), filename=f"{guest_name}.jpg")
        await bot.send_photo(chat_id=GROUP_ID, photo=photo_file, caption=caption)
        logger.info(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç '{guest_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É {GROUP_ID}.")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram –æ—Ç {guest_name}: {e}", exc_info=True)
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –æ—Ç {guest_name}: {e}", exc_info=True)

async def handle_upload(request: web.Request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å —Å —Ñ–∞–π–ª–æ–º –æ—Ç —Å–∞–π—Ç–∞."""
    try:
        data = await request.post()
        photo_field = data.get('photo')
        user_name_field = data.get('userName')

        if not photo_field or not user_name_field:
            logger.warning("–ó–∞–ø—Ä–æ—Å –±–µ–∑ –ø–æ–ª—è 'photo' –∏–ª–∏ 'userName'.")
            return web.json_response({'status': 'error', 'message': 'Missing "photo" or "userName" field'}, status=400)

        photo_content = photo_field.file.read()
        guest_name = str(user_name_field)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç '{guest_name}', —Ä–∞–∑–º–µ—Ä: {len(photo_content)} –±–∞–π—Ç.")

        bot: Bot = request.app['bot']
        asyncio.create_task(send_photo_to_group(photo_content, guest_name, bot))

        return web.json_response({'status': 'ok', 'message': 'File received and is being processed.'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        return web.json_response({'status': 'error', 'message': 'Internal server error'}, status=500)

async def main():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä."""
    bot = Bot(token=BOT_TOKEN)
    app = web.Application()
    app['bot'] = bot

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ CORS
    upload_route = app.router.add_post(UPLOAD_ROUTE, handle_upload)
    cors = aiohttp_cors.setup(app, defaults={
        "*": aiohttp_cors.ResourceOptions(allow_credentials=True, expose_headers="*", allow_headers="*")
    })
    cors.add(upload_route)

    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 8080))
    site = web.TCPSite(runner, '0.0.0.0', port)
    logger.info(f"–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://0.0.0.0:{port}")
    await site.start()

    logger.info("–°–µ—Ä–≤–µ—Ä-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–∞–π–ª—ã.")
    await asyncio.Event().wait()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

if __name__ == "__main__":
    asyncio.run(main())
