import os
import zipfile
import logging
import shutil
import asyncio
from telegram import InputMediaPhoto, Bot
from aiohttp import web
import aiohttp_cors

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = "8465873812:AAGvjy0WzCEzFx2g8S_xbVS9NaA6tupF_lM" 
GROUP_ID = -1003068558796
# -----------------

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

async def process_and_send_zip(zip_content: bytes, guest_name: str, bot: Bot):
    """–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø—É."""
    temp_dir = f"temp_{guest_name}_{int(asyncio.get_event_loop().time())}"
    
    try:
        os.makedirs(temp_dir, exist_ok=True)
        zip_path = os.path.join(temp_dir, "photos.zip")

        with open(zip_path, 'wb') as f:
            f.write(zip_content)
        logger.info(f"–ê—Ä—Ö–∏–≤ –æ—Ç '{guest_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(temp_dir)
        logger.info(f"–ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤ –ø–∞–ø–∫—É '{temp_dir}'.")

        photo_paths = [os.path.join(root, filename) for root, _, files in os.walk(temp_dir) for filename in files if filename.lower().endswith(('.jpg', '.jpeg', '.png'))]
        
        if not photo_paths:
            logger.warning(f"–í –∞—Ä—Ö–∏–≤–µ –æ—Ç {guest_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
            return

        caption = f"üì∏ –ù–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç –≥–æ—Å—Ç—è: {guest_name}"
        
        media_group_full = [InputMediaPhoto(open(photo_path, 'rb'), caption=caption if i == 0 else None) for i, photo_path in enumerate(photo_paths)]

        for i in range(0, len(media_group_full), 10):
            chunk = media_group_full[i:i + 10]
            await bot.send_media_group(chat_id=GROUP_ID, media=chunk)
        
        logger.info(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç '{guest_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É {GROUP_ID}.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞ –æ—Ç {guest_name}: {e}", exc_info=True)
    finally:
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
        logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è '{guest_name}' —É–¥–∞–ª–µ–Ω—ã.")

async def handle_upload(request: web.Request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å —Å —Ñ–∞–π–ª–æ–º –æ—Ç —Å–∞–π—Ç–∞."""
    try:
        data = await request.post()
        zip_file_field = data.get('photo')
        user_name_field = data.get('userName')

        if not zip_file_field or not user_name_field:
            return web.json_response({'status': 'error', 'message': 'Missing "photo" or "userName" field'}, status=400)

        zip_content = zip_file_field.file.read()
        guest_name = str(user_name_field)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç '{guest_name}', —Ä–∞–∑–º–µ—Ä: {len(zip_content)} –±–∞–π—Ç.")

        bot: Bot = request.app['bot']
        asyncio.create_task(process_and_send_zip(zip_content, guest_name, bot))

        return web.json_response({'status': 'ok', 'message': 'File received and is being processed.'})

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±-—Ö–µ–Ω–¥–ª–µ—Ä–µ /send-photo: {e}", exc_info=True)
        return web.json_response({'status': 'error', 'message': 'Internal server error'}, status=500)

async def main_async():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä."""
    bot = Bot(token=BOT_TOKEN)
    
    app = web.Application()
    app['bot'] = bot

    cors = aiohttp_cors.setup(app, defaults={
        "*": aiohttp_cors.ResourceOptions(
            allow_credentials=True,
            expose_headers="*",
            allow_headers="*",
            allow_methods="*",
        )
    })
    
    upload_route = app.router.add_post('/send-photo', handle_upload)
    cors.add(upload_route)

    runner = web.AppRunner(app)
    await runner.setup()
    
    # Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
    port = int(os.environ.get("PORT", 8080))
    site = web.TCPSite(runner, '0.0.0.0', port)
    
    logger.info(f"–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://0.0.0.0:{port}")
    await site.start()
    
    logger.info("–°–µ—Ä–≤–µ—Ä-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–∞–π–ª—ã.")
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main_async())
    except KeyboardInterrupt:
        logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
